location ~ \.es6$ {
	content_by_lua '

		function file_exists(name)
			local f=io.open(name,"r")
			if f~=nil then io.close(f) return true else return false end
		end

		function strpos (haystack, needle, offset) 
			local pattern = string.format("(%s)", needle)
			local i       = string.find (haystack, pattern, (offset or 0))
			return (i ~= nil and i or false)
		end

		function is_compiler_error(result)
			if (strpos(result, "Error")) then
				return true;
			end
			return false;
		end

		local filename = "/var/www/" .. ngx.var.vhost .. "/public_html" .. ngx.var.uri;
		if (file_exists(filename)) then

			local socket = require("socket");

			local startTime = socket.gettime() * 1000;

			// local handle = io.popen("/usr/local/bin/babel " .. filename .. " 2>&1");
			local handle = io.popen("/usr/local/lib/node_modules/es6-transpiler/build/es5/es6toes5 " .. filename .. " 2>&1");
			local result = handle:read("*all");
			handle:close();

			local endTime = socket.gettime() * 1000;

			ngx.header["Content-type"] = "application/javascript; charset=utf-8";
			ngx.header["Cache-Control"] = "no-cache, no-store, must-revalidate"
			ngx.header["Pragma"] = "no-cache"
			ngx.header["Expires"] = "0"

			if (not is_compiler_error(result)) then
				ngx.say("/* generated with nginx/lua " .. os.date("%Y-%m-%d %H:%M:%S") .. " */");
				ngx.say("/* took " .. (endTime - startTime) .. "ms */");
				ngx.say("");
				ngx.say(result);
			else
				-- ngx.exit(404);
				ngx.say("/* generated with nginx/lua " .. os.date("%Y-%m-%d %H:%M:%S") .. " */");
				ngx.say("/* took " .. (endTime - startTime) .. "ms */");
				ngx.say("");
				ngx.say("/*");
				ngx.say(string.gsub(result, "^%s*(.-)%s*$", "%1"));
				ngx.say("*/");
			end
		else
			ngx.say(filename);
			ngx.say("es6 file not found");
			ngx.exit(404);
		end
	';
}